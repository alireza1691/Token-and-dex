import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { useState, useEffect } from 'react'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress } from '../constants'
import { Contract, ethers } from 'ethers'
// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
// import { ConnectButton } from "web3uikit"

export default function faucet() {

  const { enableWeb3, isWeb3Enabled, isWeb3EnableLoading, account, Moralis, deactivateWeb3 } =
        useMoralis()


  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [signer, setSigner] = useState()
  const [error, setError] = useState ('')
  const [address, setAddress] = useState()
  const [web3, setWeb3] = useState()
  const [bcContract, setBcContract] = useState()
  const [balance, setBalance] = useState("0")
  const [inputValue1, setInputvalue1] = useState()
  const [inputValue2, setInputvalue2] = useState()
  const [signerAddress, setSignerAddress] = useState()
  const [betPlayers, setBetPlayers] = useState([])
  const [totalValue, setTotalValue] = useState()

  const connect =async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {
        await ethereum.request({method: "eth_requestAccounts"});
        setIsConnected(true)
        let connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        setProvider(connectedProvider)
        const _signer = connectedProvider.getSigner()
        setSigner(_signer)
        setSignerAddress(_signer.getAddress( ))
        console.log(_signer.getAddress( ));
        console.log(inputValue1);
      } catch (e) {
        console.log(e);
      }
    } else {
      setIsConnected(false)
    }
  }

  const _faucetContract = new ethers.Contract("0x2cd4e4c16d5738bd3395b221a9701aa9190e9b8c" , faucetAbi , signer )

  const faucetContract = ethers => {
   return new ethers.Contract( "0x2cd4e4c16d5738bd3395b221a9701aa9190e9b8c" , faucetAbi , provider )
  }
  
    
  // const { runContractFunction: getFaucet } = useWeb3Contract({
  //   abi: faucetAbi,
  //   contractAddress: faucetContractAddress, // specify the networkId
  //   functionName: "getFaucet",
  //   params: {inputValue1},
  // })

  const getFaucetToken = async () => {
    await _faucetContract.getFaucet(signerAddress)
  }


//   const handleSuccess = async function(tx) {
//     await tx.wait(1)
//     handleNewNotification(tx)
// }

// const handleNewNotification = function () {
//     dispatch ({
//         type: "info",
//         message: "Transaction Complete",
//         title: "Tx Notification",
//         position: "topR",
//         icon: "bell"
//     })
// }


  return (
    <div className={styles.container}>
      <Head>
        <title>Invesweet Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='box'>
          <nav className='level navbar-has-shadow py-1'>
            <div className='navbar-brand'>
              <h1>Invesweet</h1>
            </div>
            <div className='navbar-end'>
              <div className='navbar-item'>
               
                {isConnected ? (<button onClick={connect} className='button is-link'>Connected</button>) : (<button onClick={connect} className='button is-link'>Connect </button>)}
              </div>
            </div>
          </nav>
        </div>

      <main className={styles.main}>
        <div className='box'>
          <div className="tabs  is-centered ">
            <ul className=''>
              <li><Link href='/swap'>Swap</Link></li>
              <li><Link href='/liquidity'>Pool</Link></li>
              <li className="is-active"><a>Faucet</a></li>
            </ul>
          </div>
          <div className='has-text-weight-semibold py-2'>
          <p>Get test tokens once a day</p>
          </div>
          <p>These tokens hasn't any real value, you can use them for tesntnet transactions like Swap & Provide liquidity</p>
                <div className='box mt-4'>
                <label className="label">Get testnet tokens</label>
                <div className="control">
                    <div className="navbarzz-item is-hoverable navbar-end ">
                    </div>
                    <input className="input mt-2" value={inputValue1} type="text" placeholder="Input your address..."  />
                    <button onClick={async () => await getFaucetToken()} className='button is-link mt-2 mr-2'>Claim</button>
                </div>
                </div>
               
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
  }
