import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { React ,useState, useEffect } from 'react'
// import { ethers } from 'ethers'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress, dexAbi, dexContractAddress, iErc20Abi, dexNew } from '../constants'
import { BigNumber, Contract, ethers } from 'ethers'
import { Tab } from '@headlessui/react'
import { ConnectButton, useWallet } from "@mysten/wallet-kit";
// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
import * as nearAPI from "near-api-js";
// import { NearBindgen, near, call, view, initialize, UnorderedMap } from 'near-sdk-js'
import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupNearWallet } from "@near-wallet-selector/near-wallet";
// import { Wallet } from './near-wallet';
import nearWalletIconUrl from "@near-wallet-selector/near-wallet/assets/near-wallet-icon.png";


// const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
// const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })




// const { connect, keyStores, WalletConnection} = nearAPI;


// const nearWallet = setupNearWallet({
//     walletUrl: "https://wallet.testnet.near.org",
//     iconUrl: nearWalletIconUrl
//   });

// const myKeyStore = new keyStores.BrowserLocalStorageKeyStore();
// const connectionConfig = {
//   networkId: "testnet",
//   keyStore: myKeyStore, // first create a key store 
//   nodeUrl: "https://rpc.testnet.near.org",
//   walletUrl: "https://wallet.testnet.near.org",
//   helperUrl: "https://helper.testnet.near.org",
//   explorerUrl: "https://explorer.testnet.near.org",
// };

// // connect to NEAR
// const nearConnection = await connect(connectionConfig);

// // create wallet connection
// const walletConnection = new WalletConnection(nearConnection);

// // const walletConnection = new WalletConnection(nearConnection);
// walletConnection.requestSignIn(
//     "example-contract.testnet", // contract requesting access
//     "Example App", // optional title
//     "http://YOUR-URL.com/success", // optional redirect URL on success
//     "http://YOUR-URL.com/failure" // optional redirect URL on failure
//   );

// create new WalletConnection instance
// const wallet = new WalletConnection(near, 'my-app');

// // If not signed in redirect to the NEAR wallet to sign in
// // keys will be stored in the BrowserLocalStorageKeyStore
// if(!wallet.isSignedIn()) return wallet.requestSignIn()



export default function NearWallet() {


    return (
        <div className={styles.container}>
          <Head>
            <title>Invesweet Pool</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
            
    
          
    
          <footer className={styles.footer}>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span className={styles.logo}>
                <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
              </span>
            </a>
          </footer>
        </div>
      )
      }
    